% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CytoMDS.R, R/ggplots.R
\name{CytoMDS}
\alias{CytoMDS}
\alias{ggplotSamplesMDS}
\alias{ggplotSamplesMDSShepard}
\title{CytoMDS package}
\usage{
ggplotSamplesMDS(
  mdsObj,
  pData = data.frame(sampleId = seq_len(nrow(mdsObj$proj))),
  projectionAxes = c(1, 2),
  biplot = FALSE,
  extVariables = NULL,
  pDataForColour = NULL,
  pDataForShape = NULL,
  pDataForLabel = "name",
  sizeReflectingStress = FALSE,
  title = "Multi Dimensional Scaling",
  repelPointsLabels = TRUE,
  repelArrowsLabels = FALSE,
  ...
)

ggplotSamplesMDSShepard(
  mdsObj,
  nDim = NULL,
  title = "Multi Dimensional Scaling - Shepard's diagram",
  pointSize = 0.5
)
}
\arguments{
\item{mdsObj}{a MDS object calculated by the SMACOF algorithm using
the computeMetricMDS() function}

\item{pData}{a data.frame providing user input sample data.
These can be design of experiment variables, phenotype data per sample,...
and will be used to highlight sample categories in the plot.}

\item{projectionAxes}{which two axes should be plotted
(should be a numeric vector of length 2)}

\item{biplot}{if TRUE, adds projection of external variables}

\item{extVariables}{are used to generate a biplot
these are the external variables to regress with obtained configuration
according to the two projection axes}

\item{pDataForColour}{if not NULL, which \code{pData} variable
will be used as colour aesthetic}

\item{pDataForShape}{if not NULL, which \code{pData} variable
will be used as shape aesthetic}

\item{pDataForLabel}{if not NULL, which \code{pData} variable
will be used as point labels in the plot}

\item{sizeReflectingStress}{if TRUE, size of points will appear
proportional to stress by point, i.e. the bigger the sample point appears,
the less accurate its representation is
(in terms of distances w.r.t. other points)}

\item{title}{title to give to the plot}

\item{repelPointsLabels}{if TRUE, uses \code{ggrepel::geom_text_repel()}
instead of \code{ggplot2::geom_text()}
(try to split the labels such that they do not overlap) for the points}

\item{repelArrowsLabels}{if TRUE, uses \code{ggrepel::geom_text_repel()}
instead of \code{ggplot2::geom_text()} for the arrows}

\item{...}{additional parameters passed to \code{ggrepel::geom_text_repel()}
(if used)}

\item{nDim}{number of dimensions to use when calculating
Shepard's diagram and Rsquare.
If \code{NULL}, it will be set equal to the number of projection dimensions
as calculated in \code{mdsObj}}

\item{pointSize}{plot size of points}
}
\value{
a ggplot object
}
\description{
\code{CytoMDS} implements a low dimensional visualization of a set of cytometry
samples, in order to visually assess the 'distances' between them.
This, in turn, can greatly help the user to identify quality issues
like batch effects or outlier samples, and/or check the presence of
potential sample clusters that might align with the experimental design.

The CytoMDS algorithm combines, on the one hand,
the concept of Earth Mover's Distance (EMD), a.k.a. Wasserstein metric
and, on the other hand, the Multi Dimensional Scaling (MDS) algorithm
for the low dimensional projection.

Also, the package provides some diagnostic tools for
both checking the quality of the MDS projection,
as well as tools to help with the interpretation of
the axes of the projection.

\code{ggplotSamplesMDS} uses ggplot2
to provide plots of Metric MDS results.
If both \code{projectionAxes} are in c(1,2),
a global RSquare for these 2 axes is provided. For additional dimensions,
a marginal RSquare per dimension is provided.

\code{ggplotSamplesMDSShepard} uses ggplot2
to provide plot of Metric MDS results.
Shepard diagram provides a scatter plot of :
\itemize{
\item on the x axis, the high dimensional pairwise distances
between each sample pairs
\item on the y axis, the corresponding pairwise distances in the obtained
low dimensional projection
}
}
\examples{

library(CytoPipeline)

data(OMIP021Samples)

# estimate scale transformations 
# and transform the whole OMIP021Samples

transList <- estimateScaleTransforms(
    ff = OMIP021Samples[[1]],
    fluoMethod = "estimateLogicle",
    scatterMethod = "linearQuantile",
    scatterRefMarker = "BV785 - CD3")

OMIP021Trans <- CytoPipeline::applyScaleTransforms(
    OMIP021Samples, 
    transList)
  
ffList <- flowCore::flowSet_to_list(OMIP021Trans)

# As there are only 2 samples in OMIP021Samples dataset,
# we create artificial samples that are random combinations of both samples

for(i in 3:5){
    ffList[[i]] <- 
        CytoPipeline::aggregateAndSample(
            OMIP021Trans,
            seed = 10*i,
            nTotalEvents = 5000)[,1:22]
}

fsNames <- c("Donor1", "Donor2", paste0("Agg",1:3))
names(ffList) <- fsNames

fsAll <- as(ffList,"flowSet")

# calculate all pairwise distances

pwDist <- getPairWiseEMDDist(fsAll, 
                             channels = c("FSC-A", "SSC-A"),
                             verbose = FALSE)

# compute Metric MDS object

mdsObj <- computeMetricMDS(pwDist, nDim = 4, seed = 0)

# plot mds projection on axes 1 and 2,
# use 'group' for colour, 'type' for shape, and no label 

p_12 <- ggplotSamplesMDS(
    mdsObj = mdsObj,
    pData = flowCore::pData(fsAll),
    projectionAxes = c(1,2),
    pDataForColour = "group",
    pDataForLabel = NULL,
    pDataForShape = "type")

# plot mds projection on axes 3 and 4,
# use 'group' for colour, and 'name' as point label

p_34 <- ggplotSamplesMDS(
    mdsObj = mdsObj,
    pData = flowCore::pData(fsAll),
    projectionAxes = c(3,4),
    pDataForColour = "group",
    pDataForLabel = "name")

# plot mds projection on axes 1 and 2,
# use 'group' for colour, 'type' for shape, and 'name' as point label
# have sample point size reflecting 'stress'
# i.e. quality of projection w.r.t. distances to other points

p12_Stress <- ggplotSamplesMDS(
    mdsObj = mdsObj,
    pData = flowCore::pData(fsAll),
    projectionAxes = c(1,2),
    pDataForColour = "group",
    pDataForLabel = "name",
    pDataForShape = "type",
    sizeReflectingStress = TRUE)

# try to associate axes with median of each channel
# => use bi-plot

extVars <- getChannelsSummaryStat(
    fsAll,
    channels = c("FSC-A", "SSC-A"),
    statsFUN = stats::median)


bp_12 <- ggplotSamplesMDS(
    mdsObj = mdsObj,
    pData = flowCore::pData(fsAll),
    projectionAxes = c(1,2),
    biplot = TRUE,
    extVariables = extVars,
    pDataForColour = "group",
    pDataForLabel = NULL,
    pDataForShape = "type",
    seed = 0)

bp_34 <- ggplotSamplesMDS(
    mdsObj = mdsObj,
    pData = flowCore::pData(fsAll),
    projectionAxes = c(3,4),
    biplot = TRUE,
    extVariables = extVars,
    pDataForColour = "group",
    pDataForLabel = "name",
    seed = 0)

# Shepard diagrams 

p2D <- ggplotSamplesMDSShepard(
    mdsObj,
    nDim = 2,
    pointSize = 1,
    title = "Shepard with 2 dimensions")

p3D <- ggplotSamplesMDSShepard(
    mdsObj,
    nDim = 3,
    title = "Shepard with 3 dimensions") 
    #' 
pDefD <- ggplotSamplesMDSShepard(
    mdsObj,
    title = "Shepard with default nb of dimensions") 

}
\seealso{
\link{ggplotSamplesMDS}, \link{ggplotSamplesMDSShepard}, \link{computeMetricMDS}
}
