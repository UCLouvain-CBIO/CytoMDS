% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggplots.R
\name{ggplotSampleMDS}
\alias{ggplotSampleMDS}
\title{Plot of Metric MDS object}
\usage{
ggplotSampleMDS(
  mdsObj,
  pData,
  sampleSubset,
  projectionAxes = c(1, 2),
  biplot = FALSE,
  biplotType = c("correlation", "regression"),
  extVariables,
  pDataForColour,
  pDataForShape,
  pDataForLabel,
  pDataForAdditionalLabelling,
  sizeReflectingStress = FALSE,
  title = "Multi Dimensional Scaling",
  displayPointLabels = TRUE,
  repelPointLabels = TRUE,
  displayArrowLabels = TRUE,
  repelArrowLabels = FALSE,
  arrowThreshold = 0.8,
  flipXAxis = FALSE,
  flipYAxis = FALSE,
  displayPseudoRSq = TRUE,
  ...
)
}
\arguments{
\item{mdsObj}{a MDS object calculated by the SMACOF algorithm using
the computeMetricMDS() function}

\item{pData}{(optional) a data.frame providing user input sample data.
These can be design of experiment variables, phenotype data per sample,...
and will be used to highlight sample categories in the plot
and/or for subsetting.}

\item{sampleSubset}{(optional) a logical vector, of size \code{nrow(pData)},
which is by construction the nb of samples, indicating which samples to keep
in the plot. Typically it is obtained through the evaluation of
a logical condition on \code{pData} rows.}

\item{projectionAxes}{which two axes should be plotted
(should be a numeric vector of length 2)}

\item{biplot}{if TRUE, adds projection of external variables}

\item{biplotType}{type of biplot used:
\itemize{
\item if "correlation", projection of external variables will be according to
Pearson correlations w.r.t. projection axes (arrow x & y coordinates)
\item if "regression", a linear regression of external variables using the 2
projection axes as explanatory variables is performed, and the projection
of external variables will be according to regression coefficients
(arrow direction) and R square of regression (arrow size)
}}

\item{extVariables}{are used to generate a biplot
these are the external variables that will be used in the biplot.
They should be provided as a matrix with named columns corresponding to the
variables. The number of rows should be the same as the number of samples.}

\item{pDataForColour}{(optional) which \code{pData} variable
will be used as colour aesthetic. Should be a character.}

\item{pDataForShape}{(optional) which \code{pData} variable
will be used as shape aesthetic. Should be a character.}

\item{pDataForLabel}{(optional) which \code{pData} variable
will be used as point labels in the plot. Should be a character.
If missing, point labels will be set equal to point names defined in
MDS object (if not NULL, otherwise no labels will be set).}

\item{pDataForAdditionalLabelling}{(optional) which \code{pData} variable(s)
will be add to the ggplot mapping, as to make them available for
\emph{plotly} tooltipping. Should be an array of character of maximum length 3.
Note this works only if biplot=FALSE, as biplots contain circle and arrows
that are currently not supported under \code{ggplotly}.}

\item{sizeReflectingStress}{if TRUE, size of points will appear
proportional to stress by point, i.e. the bigger the sample point appears,
the less accurate its representation is
(in terms of distances w.r.t. other points)}

\item{title}{title to give to the plot}

\item{displayPointLabels}{if TRUE, displays labels attached to points
(see \code{pDataForLabels} for the setting of the label values)}

\item{repelPointLabels}{if TRUE, uses \code{ggrepel::geom_text_repel()}
instead of \code{ggplot2::geom_text()}
(try to split the labels such that they do not overlap) for the points}

\item{displayArrowLabels}{if TRUE, displays arrows labels (only with biplot)}

\item{repelArrowLabels}{if TRUE, uses \code{ggrepel::geom_text_repel()}
instead of \code{ggplot2::geom_text()} for the arrows (only with biplot)}

\item{arrowThreshold}{(only with biplot), arrows will be made barely visible
if their length is (in absolute value) less than this threshold.}

\item{flipXAxis}{if TRUE, take the opposite of x values
(provided as it might ease low dimensional projection comparisons)}

\item{flipYAxis}{if TRUE, take the opposite of y values
(provided as it might ease low dimensional projection comparisons)}

\item{displayPseudoRSq}{if TRUE, display pseudo RSquare in subtitle, on top
of nb of dimensions}

\item{...}{additional parameters passed to \code{ggrepel::geom_text_repel()}
(if used)}
}
\value{
a ggplot object
}
\description{
\code{ggplotSampleMDS} uses ggplot2
to provide plots of Metric MDS results.
By default, a pseudo Rsquare projection quality indicator,
and the number of dimensions of the MDS projection are provided in sub-title
}
\examples{

# prepare data, build MDS object
example("computeMetricMDS")

# plot mds projection on axes 1 and 2,
# use 'grpId' for colour, 'type' for shape, and no label 

p_12 <- ggplotSampleMDS(
    mdsObj = mdsObj,
    pData = flowCore::pData(fsAll),
    projectionAxes = c(1,2),
    pDataForColour = "grpId",
    pDataForShape = "type")

# plot mds projection on axes 3 and 4,
# use 'grpId' for colour, and 'name' as point label

p_34 <- ggplotSampleMDS(
    mdsObj = mdsObj,
    pData = flowCore::pData(fsAll),
    projectionAxes = c(3,4),
    pDataForColour = "grpId",
    pDataForLabel = "name")

# plot mds projection on axes 1 and 2,
# use 'group' for colour, 'type' for shape, and 'name' as point label
# have sample point size reflecting 'stress'
# i.e. quality of projection w.r.t. distances to other points

p12_Stress <- ggplotSampleMDS(
    mdsObj = mdsObj,
    pData = flowCore::pData(fsAll),
    projectionAxes = c(1,2),
    pDataForColour = "grpId",
    pDataForLabel = "name",
    pDataForShape = "type",
    sizeReflectingStress = TRUE)

# try to associate axes with median of each channel
# => use bi-plot

extVars <- channelSummaryStats(
    fsAll,
    channels = c("FSC-A", "SSC-A"),
    statFUNs = stats::median)


bp_12 <- ggplotSampleMDS(
    mdsObj = mdsObj,
    pData = flowCore::pData(fsAll),
    projectionAxes = c(1,2),
    biplot = TRUE,
    extVariables = extVars,
    pDataForColour = "grpId",
    pDataForShape = "type",
    seed = 0)

bp_34 <- ggplotSampleMDS(
    mdsObj = mdsObj,
    pData = flowCore::pData(fsAll),
    projectionAxes = c(3,4),
    biplot = TRUE,
    extVariables = extVars,
    pDataForColour = "grpId",
    pDataForLabel = "name",
    seed = 0)

}
\seealso{
\link{ggplotSampleMDSWrapBiplots}, \link{ggplotSampleMDSShepard},
\link{computeMetricMDS}
}
