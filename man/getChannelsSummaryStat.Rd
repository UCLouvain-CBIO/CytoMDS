% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stats.R
\name{getChannelsSummaryStat}
\alias{getChannelsSummaryStat}
\title{Calculate a summary statistic of some channels of
all flowFrames of a flowSet}
\usage{
getChannelsSummaryStat(
  fs,
  channels = NULL,
  transList = NULL,
  statFUN = stats::median,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{fs}{a flowCore::flowSet}

\item{channels}{which channels (integer index(ices) or character(s)):
\itemize{
\item if it is a character vector,
it can refer to either the channel names, or the marker names
\item if it is a numeric vector,
it refers to the indexes of channels in \code{fs}
\item if NULL all scatter and fluorescent channels of \code{fs}
will be selected
}}

\item{transList}{if not \code{NULL}, the flowSet will be first
transformed using the transList
(which should be a \code{flowCore::transformList}),
before evaluating the distance}

\item{statFUN}{function to call to calculate the statistic}

\item{verbose}{if \code{TRUE}, output a message
after each single distance calculation}

\item{...}{additional parameters passed to \code{getEMDDist()}}
}
\value{
a matrix of which the columns are the channel statistics
for all flowFrames of the flowSet.
}
\description{
Calculate a summary statistic of some channels of
all flowFrames of a flowSet
}
\examples{

library(CytoPipeline)

data(OMIP021Samples)

# estimate scale transformations
    transList <- CytoPipeline::estimateScaleTransforms(
        ff = OMIP021Samples[[1]],
        fluoMethod = "estimateLogicle",
        scatterMethod = "linearQuantile",
        scatterRefMarker = "BV785 - CD3")
    

channelsOrMarkers <- c("FSC-A", "SSC-A", "BV785 - CD3")

# calculate mean for each 4 selected channels, for each 2 samples

channelMeans <- getChannelsSummaryStat(
    OMIP021Samples,
    channels = channelsOrMarkers,
    transList = transList,
    statFUN = mean)
    
# calculate median for each 4 selected channels, for each 2 samples


channelMedians <- getChannelsSummaryStat(
    OMIP021Samples,
    channels = channelsOrMarkers,
    transList = transList,
    statFUN = stats::median)
   
# calculate std deviation for each 4 selected channels, for each 2 samples
   
channelStdDevs <- getChannelsSummaryStat(
    OMIP021Samples,
    channels = channelsOrMarkers,
    transList = transList,
    statFUN = stats::sd)

}
